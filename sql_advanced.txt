单值索引
select * from user where name = '';

create index idx_user_name on user(name);


多值索引
select * from user where name = '' and email ='';
create index inx_user_nameEmail on user(name,email);

join太多降低查询效率

sql执行顺序

7种join关系
left join
inner join A交B
left join AB共有 + all A
right join AB共有 + all B
left join where B.key is null  A独有
right join where A.key is null B独有
FUll outer join Ab全连接
FULL outer join where A.key is null or b.key is null A独有+B独有


索引是什么
index是帮助mysql高效获取数据的数据结构，索引是一种数据结构，提高查找效率 类比于字典 排好序的快速查找数据结构
影响where orderby 效率
索引数据结构
FRM 框架结构 
类二叉树索引 logn 查找时间

索引优缺点
排序查找

缺点 索引占用空间 insert update delete更加耗时

索引分类  单值索引 唯一索引 复合索引 基本语法

语法 create[UNIQUE] INDEX indexName on mytable(name);
ALter mytable ADD [UNIQUE] INDEX[index_name] ON(name);
Drop INDEX[indexName] ON mytable;
Show INDEX FROM table_name;


mysql 索引结构  BTREE索引 原理
		   HASH索引
		   

哪些情况可以建索引
primary key
频繁查找
外键关系
频繁更新字段 不要建立
where用不到的字段不创建索引
单键索引
order by 排序诉求相同
查询中统计或分组字段


哪些情况不要建立索引
表记录少
经常增删改不建
重复内容多

 
mysql query optimizer

mysql 瓶颈: cpu IO 服务器硬件性能瓶颈
分析报告

*Explain
分析查询语句并找到性能瓶颈

explain + sql语句

id  | select_type | table | type | possible_keys | key |key_len | ref| rows| extra


id
id相同 从上到下
id不同时 id大的先执行 子查询
id相同也有不同  数字大先走 平级顺序执行

select_type






type

ALL : 检索全表扫描
const: 通过索引一次就找到了，查找主键索引或者unique where里有单索引查询
index: 全表扫描 全索引扫描
range： 范围 索引


ref: 非唯一性索引匹配 返回所有行
eq_ref:  用到索引 只有一条记录与之匹配


system：表只有一行记录，等于系统表
NULL

system > const >eq_ref>ref>range>index>ALL
达到range ref级别



possible_keys 可能应用在这张表上的索引
key 实际使用的索引 如果为null： 索引失效 或 没建索引 若使用了覆盖索引 则该索引仅出现在key列表中 
覆盖索引：查询的字段 和 建的符合索引的个数和顺序一一一致
决定是否使用索引
mysql用的是哪个索引

key: 索引中使用的字节数
key_len:索引字段最大可能长度 与精确矛盾  





ref:显示哪一列被使用了， 有可能是constant


rows: 所要读取的行数 越小越好


extra:包含不适合其他列显示 但很重要的信息

using filesort: 无法利用索引完成的排序操作 #危险 group by
using temporary: 产生了内部零时表  然后删除 伤系统性能
using index: 好事 使用了覆盖索引，避免访问了表的数据行 效率好  #当没有where时，没有索引键的查找动作
using where: 索引被用于索引键值的查找
using joinbuffer: 使用了连接缓存
impossible where:  where false 不能获取元组
select tables optimized away
distinct: 第一个就收工



索引分析







Explain select id,author_id from article where category_id=1 and comments>1 order by views desc limit 1;
+----+-------------+---------+------+---------------+------+---------+------+------+-----------------------------+
| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra                       |
+----+-------------+---------+------+---------------+------+---------+------+------+-----------------------------+
|  1 | SIMPLE      | article | ALL  | NULL          | NULL | NULL    | NULL |    3 | Using where; Using filesort |
+----+-------------+---------+------+---------------+------+---------+------+------+-----------------------------+

file sort, all


#开始优化
create index idx_article_ccv on article(category_id,comments,views);



mysql> Explain select id,author_id from article where category_id=1 and comments>1 order by views desc limit 1;
+----+-------------+---------+-------+-----------------+-----------------+---------+------+------+-----------------------------+
| id | select_type | table   | type  | possible_keys   | key             | key_len | ref  | rows | Extra                       |
+----+-------------+---------+-------+-----------------+-----------------+---------+------+------+-----------------------------+
|  1 | SIMPLE      | article | range | idx_article_ccv | idx_article_ccv | 8       | NULL |    1 | Using where; Using filesort |
+----+-------------+---------+-------+-----------------+-----------------+---------+------+------+-----------------------------+
1 row in set (0.00 sec)

mysql> Explain select id,author_id from article where category_id=1 and comments=1 order by views desc limit 1;
+----+-------------+---------+------+-----------------+-----------------+---------+-------------+------+-------------+
| id | select_type | table   | type | possible_keys   | key             | key_len | ref         | rows | Extra       |
+----+-------------+---------+------+-----------------+-----------------+---------+-------------+------+-------------+
|  1 | SIMPLE      | article | ref  | idx_article_ccv | idx_article_ccv | 8       | const,const |    1 | Using where |
+----+-------------+---------+------+-----------------+-----------------+---------+-------------+------+-------------+


drop index idx_article_ccv ON article;



create index idx_article_cv on article(category_id,views);



left join + 右索引 
right join + 左索引
小表驱动大表
buffer大



避免索引失效
全值匹配我最爱
最佳左前缀原则 ：带头大哥不能死 
复合索引为阶梯 中间消失上不去
不在索引列上做任何操作
存储引擎不能使用范围之后的列 name = , age> age之后不能用
尽量使用覆盖索引 减少select *
在使用不等于的时候无法使用索引会导致全表扫描  ！=  <>
is null, is not null 无法使用索引 impossible where 避免空值 default value
like以避免通配符开通('%abc...')mysql索引失效会变成全表扫描  =>   like('abc%')  type:range
如何解决索引失效问题：覆盖索引 
字符串不加单引号会使索引失效
or会使索引失效



组合索引 顺序重要
单值选频率高的



分析

产看慢sql情况
开启慢查询日志，抓取慢查询，捕获
explain 慢查询分析
show profile执行细节 生命周期
sql数据库服务器参数调优


小表驱动大表


当A表<B表时，in

反之 exits
select * from A exits (select 1 from B where B.id =A.id)


order by 尽量使用index方式排序
order by 使用索引最左前列 ;使用where子句与order by子句条件列组合满足索引最左前列

双路排序
单路排序  sort buffer size/ max_lenth_for sort_data
 

文件排序  扫描索引排序
排序与查询使用相同的索引


慢查询日志分析
#long_query_time超过 加入日志
需要手动开启 并影响部分性能
Show variables like '%slow_query_log%';
set global slow_query_log = 1; #针对本次数据库生效
如果想要永久生效：进入配置文件配置


show variables like '%long_query_time%';
set global long_query_time =3;

show global status like '%Slow_queries%';


mysqldumpslow --help


函数 存储过程
函数有返回值
存储过程 没有返回值



create table dept(
id int unsigned primary key auto_increment,
deptno mediumint unsigned not null default 0,
dname varchar(20) not null default "",
loc varchar(13) not null default ""
)engine=innodb default charset=GBK;

CREATE TABLE emp(
id int unsigned primary key auto_increment,
empno mediumint unsigned not null default 0,
ename varchar(20) not null default "",
job varchar(9) not null default "",
mgr mediumint unsigned not null default 0,
hiredate date not null,
sal decimal(7,2) not null,
comm decimal(7,2) not null,
deptno mediumint unsigned not null default 0
)ENGINE=INNODB DEFAULT CHARSET=GBK;



insert 100w data

show varibales like 'log_bin_trust_function_creators';
set global log_bin_trust_function_creators=1;

随机产生字符串
随机产生部门编号


delimiter $$
create function ran_string(n int) returns varchar(255)
begin
declare chars_str varchar(100) default 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
declare return_str varchar(255) default '';
declare i int default 0;
while i < n do
set return_str = concat(return_str,substring(chars_str,floor(1+rand()*52),1));
set i=i+1;
end while;
return return_str;
end $$


Show profiles;
sql调优
show variables like 'profiling'
set profiling = on;
show profile cpu,block io for query id;

#严重问题
converting heap to myisam
creating tmp table
copying to tmp table on disk
locked


MYsql锁机制
锁分类 读锁 写锁
表锁 行锁 页锁
show open tables;
lock table mylock read, book write;
unlock tables;


表锁
read lock  共享锁  不能写入 都自己 不能改自己 不能读别其他表  其他人可以查 修改时被阻塞 可以查看其他未加锁的表

write lock 
lock table mylock write;
自己可以读锁住的表
自己可以写锁住的表
自己不可以读其他的表
其他人可以读其他未锁的表
其他人读锁住的表会阻塞

MYISAM 会自动给所有表上读锁，在增删查改时会自动上写锁
读锁会阻塞写，但不阻塞读。写锁阻塞读写


show status like 'table%';

table_locks_waited : 高->锁竞争
table_locks_immediate

myisam不适合做写为主表的引擎 偏读


行锁分析: 偏向于innoDB存储，冲突低，并发高
行级锁

事务 transaction ACID
atomicity, consistent,isolation,durable

更新丢失 
脏读 读到uncommit数据 
不可重读 A读到了事务B已经提交的修改数据
幻读 事务A读到了事务B提交的新增数据

脏读是事务B修改了数据
幻读是事务B里面增加了数据



事务隔离级别 四种
read uncommitted; read committed; repeatable read; serializable
初始是 repeatable read 事务级别 无脏读 不可重读 会有幻读

#注意不要行锁变表锁

行锁 Innodb
set autocommit =0;

begin;
select * from table where a = 8 for update; 手工锁一行
do changing# lock the row, other sessions can't update this row
commit
INnodb_row_lock_waits:当前正在等待锁定的数量





